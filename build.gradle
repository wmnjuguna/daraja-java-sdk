/*
 * Daraja Java SDK - Build Configuration
 *
 * Java SDK for integrating with Safaricom Daraja API using OpenFeign
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'app.daraja.sdk'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    // OpenFeign for declarative REST clients
    api 'io.github.openfeign:feign-core:13.5'
    api 'io.github.openfeign:feign-jackson:13.5'
    api 'io.github.openfeign:feign-slf4j:13.5'

    // Jackson for JSON processing
    api 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    api 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'
    api 'com.fasterxml.jackson.core:jackson-core:2.18.2'

    // Logging facade
    api 'org.slf4j:slf4j-api:2.0.17'

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    testImplementation 'org.mockito:mockito-core:5.15.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2'
    testImplementation 'ch.qos.logback:logback-classic:1.5.15'
    testImplementation 'org.wiremock:wiremock:3.13.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = false
    }
}

tasks.named('compileJava') {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

tasks.named('compileTestJava') {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

tasks.named('javadoc') {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.named('jar') {
    manifest {
        attributes(
            'Implementation-Title': 'Daraja Java SDK',
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'app.daraja.sdk'
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'Daraja Java SDK'
                description = 'Java SDK for integrating with Safaricom Daraja API using OpenFeign'
                url = 'https://github.com/wmnjuguna/daraja-java-sdk'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'wmnjuguna'
                        name = 'Wilfred Njuguna'
                        email = 'mwangiwilly395@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/wmnjuguna/daraja-java-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com:wmnjuguna/daraja-java-sdk.git'
                    url = 'https://github.com/wmnjuguna/daraja-java-sdk/tree/main'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    def signingPassword = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")

    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

// Additional helpful tasks
tasks.register('publishSnapshot') {
    description = 'Publishes a snapshot version to Maven Central'
    group = 'publishing'
    dependsOn 'publish'
    doFirst {
        if (!version.endsWith('SNAPSHOT')) {
            throw new GradleException("Version must end with '-SNAPSHOT' for snapshot publishing")
        }
    }
}

tasks.register('publishRelease') {
    description = 'Publishes a release version to Maven Central'
    group = 'publishing'
    dependsOn 'publish'
    doFirst {
        if (version.endsWith('SNAPSHOT')) {
            throw new GradleException("Version cannot end with '-SNAPSHOT' for release publishing")
        }
    }
}

tasks.register('checkPublishingRequirements') {
    description = 'Checks if all publishing requirements are met'
    group = 'verification'
    doLast {
        def checks = [:]

        // Check credentials
        def ossrhUsername = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
        def ossrhPassword = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        def signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
        def signingPassword = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")

        checks["OSSRH Username"] = ossrhUsername ? "✓ Set" : "✗ Missing"
        checks["OSSRH Password"] = ossrhPassword ? "✓ Set" : "✗ Missing"
        checks["Signing Key"] = signingKey ? "✓ Set" : "✗ Missing"
        checks["Signing Password"] = signingPassword ? "✓ Set" : "✗ Missing"

        // Check version format
        checks["Version Format"] = version.matches(/^\d+\.\d+\.\d+(-SNAPSHOT)?$/) ? "✓ Valid" : "✗ Invalid"

        // Check required POM fields
        checks["Group ID"] = group ? "✓ Set" : "✗ Missing"
        checks["Artifact ID"] = rootProject.name ? "✓ Set" : "✗ Missing"

        println("\n=== Publishing Requirements Check ===")
        checks.each { key, value ->
            println("$key: $value")
        }

        def missing = checks.findAll { it.value.startsWith("✗") }
        if (missing) {
            println("\n⚠️  Please fix the missing requirements before publishing.")
            println("📖 See PUBLISHING.md for detailed setup instructions.")
        } else {
            println("\n✅ All requirements met! Ready to publish.")
        }
    }
}
